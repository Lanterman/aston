openapi: 3.0.0
info:
  version: 1.0.0
  title: Library project
  description: >-
    For authenticated requests, create a user and enter the resulting token
    along with the word 'Bearer'.


    Example 'Bearer {JWT_token}'.


    P.S.
    Before resetting "auth/reset_password/<user_email>/<user_secret_key>/" password, you must request it from "/auth/profile/try_to_reset_password/" endpoint.
  contact:
    email: klivchisnkydmitry@gmail.com
servers:
  - url: https://0.0.0.0:8000/api/v1
tags:
  - name: books
    description: Get a book list and create a new book
  - name: book
    description: CRUD methods for book
  - name: genres
    description: Get a genre list and create a new genre
  - name: genre
    description: CRUD methods for genre
  - name: user
    description: Operations about user
paths:
  /books:
    get:
      tags:
        - books
      summary: Get a book list
      description: Get a list of all permitted books in the library
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    post:
      tags:
        - books
      summary: Add a new book
      description: Add a new book to the library
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid data
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the book
                  type: string
                genres:
                  description: Updated status of the book
                  type: array
                  items: 
                    $ref: '#/components/schemas/Genre'
                year_of_publication:
                  description: Updated year of publication of the book
                  type: integer
  /books/{book_id}:
    get:
      tags:
        - book
      summary: Find book by ID
      description: Returns a single book
      parameters:
        - name: book_id
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    put:
      tags:
        - book
      summary: Updates a book in the library with form data
      parameters:
        - name: book_id
          in: path
          description: ID of book that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The book was updated            
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
        '405':
          description: Invalid input
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the book
                  type: string
                year_of_publication:
                  description: Updated year of publication of the book
                  type: integer
    delete:
      tags:
        - book
      summary: Deletes a book
      parameters:
        - name: book_id
          in: path
          description: Book id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The book was deleted 
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
  /genres:
    get:
      tags:
        - genres
      summary: Get a genre list
      description: Get a list of all permitted genres in the library
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
        '400':
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    post:
      tags:
        - genres
      summary: Add a new genre
      description: Add a new genre to the library
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '400':
          description: Invalid data
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the genre
                  type: string
  /genres/{genre_name}:
    get:
      tags:
        - genre
      summary: Find genre by name
      description: Returns a single genre with books of this genre
      parameters:
        - name: genre_name
          in: path
          description: Name of genre with books of this genre to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreWithBooks'
        '404':
          description: Genre not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    put:
      tags:
        - genre
      summary: Updates a genre in the library with form data
      parameters:
        - name: genre_name
          in: path
          description: Name of genre that needs to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The book was updated            
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
        '405':
          description: Invalid input
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the genre
                  type: string

    delete:
      tags:
        - genre
      summary: Deletes a genre
      parameters:
        - name: genre_name
          in: path
          description: Genre name to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The book was deleted 
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        genres:
          $ref: '#/components/schemas/Genre'
        year_of_publication:
          type: integer
          format: int64
          description: Year of publication
        author_id:
          type: integer
          format: int64
      required:
        - name
        - year_of_publication
        - author_id
    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - name
    GenreWithBooks:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        books:
          $ref: '#/components/schemas/Book'

    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600
  securitySchemes:
    Bearer:
      type: apiKey
      description: "API key to authorize requests. Authorization by JWT token. Example: 'Bearer {JWT token}'."
      name: api_key
      in: header