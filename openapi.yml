openapi: 3.0.0
info:
  version: 1.0.0
  title: Library project
  description: >-
    For authenticated requests, create a user and enter the resulting token
    along with the word 'Bearer'.


    Example 'Bearer {JWT_token}'.


    P.S.
    Before resetting "auth/reset_password/<user_email>/<user_secret_key>/" password, you must request it from "/auth/profile/try_to_reset_password/" endpoint.
  contact:
    email: klivchisnkydmitry@gmail.com
servers:
  - url: https://0.0.0.0:8000/api/v1
tags:
  - name: books
    description: Get a book list and create a new book
  - name: book
    description: CRUD methods for book
  - name: genres
    description: Get a genre list and create a new genre
  - name: genre
    description: CRUD methods for genre
  - name: user
    description: Operations about user
paths:
  /books:
    get:
      tags:
        - books
      summary: Get a book list
      description: Get a list of all permitted books in the library
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    post:
      tags:
        - books
      summary: Add a new book
      description: Add a new book to the library
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid data
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the book
                  type: string
                genres:
                  description: Updated status of the book
                  type: array
                  items: 
                    $ref: '#/components/schemas/Genre'
                year_of_publication:
                  description: Updated year of publication of the book
                  type: integer
  /books/{book_id}:
    get:
      tags:
        - book
      summary: Find book by ID
      description: Returns a single book
      parameters:
        - name: book_id
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    put:
      tags:
        - book
      summary: Updates a book in the library with form data
      parameters:
        - name: book_id
          in: path
          description: ID of book that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The book was updated            
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
        '405':
          description: Invalid input
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the book
                  type: string
                year_of_publication:
                  description: Updated year of publication of the book
                  type: integer
    delete:
      tags:
        - book
      summary: Deletes a book
      parameters:
        - name: book_id
          in: path
          description: Book id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The book was deleted 
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
  /genres:
    get:
      tags:
        - genres
      summary: Get a genre list
      description: Get a list of all permitted genres in the library
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
        '400':
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    post:
      tags:
        - genres
      summary: Add a new genre
      description: Add a new genre to the library
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '400':
          description: Invalid data
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the genre
                  type: string
  /genres/{genre_name}:
    get:
      tags:
        - genre
      summary: Find genre by name
      description: Returns a single genre with books of this genre
      parameters:
        - name: genre_name
          in: path
          description: Name of genre with books of this genre to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '404':
          description: Genre not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    put:
      tags:
        - genre
      summary: Updates a genre in the library with form data
      parameters:
        - name: genre_name
          in: path
          description: Name of genre that needs to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The book was updated            
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
        '405':
          description: Invalid input
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the genre
                  type: string

    delete:
      tags:
        - genre
      summary: Deletes a genre
      parameters:
        - name: genre_name
          in: path
          description: Genre name to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The book was deleted 
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'

components:
  schemas:
    TryToResetPassword:
      type: object
      properties:
        email:
          type: integer
          format: email
          title: Email address
          maxLength: 254
          minLength: 10
      required:
        - email
    EnemyProfile:
      type: object
      properties:
        username:
          type: string
          title: Username
          pattern: ^[\w.@+-]+$
          maxLength: 50
          minLength: 10
        first_name:
          type: string
          title: First name
          maxLength: 150
        last_name:
          type: string
          title: Last name
          maxLength: 150
        email:
          type: integer
          format: email
          title: Email address
          maxLength: 254
          minLength: 10
        created_in:
          type: string
          format: date-time
          title: Created in
          readOnly: true
    UpdateUserInfo:
      type: object
      properties:
        first_name:
          type: string
          title: First name
          maxLength: 150
        last_name:
          type: string
          title: Last name
          maxLength: 150
        email:
          type: integer
          format: email
          title: Email address
          maxLength: 254
          minLength: 10
      required:
        - last_name
        - first_name
        - email
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
          title: Old password
          minLength: 10
        new_password:
          type: string
          title: New password
          minLength: 10
        confirm_password:
          type: string
          title: Confirm password
          minLength: 10
      required:
        - old_password
        - new_password
        - confirm_password
    ResetPassword:
      type: object
      properties:
        new_password:
          type: string
          title: New password
          minLength: 10
        confirm_password:
          type: string
          title: Confirm password
          minLength: 10
      required:
        - new_password
        - confirm_password
    SignIn:
      type: object
      properties:
        email:
          type: integer
          format: email
          title: Email
          maxLength: 254
          minLength: 10
        password:
          type: string
          title: Password
          minLength: 10
      required:
        - email
        - password
    BaseJWTToken:
      type: object
      properties:
        access_token:
          type: string
          title: Access token
          minLength: 20
        refresh_token:
          type: string
          title: Refresh token
          minLength: 20
          maxLength: 250
        created:
          type: string
          format: date-time
          title: Created in
          readOnly: true
        user:
          type: integer
          title: User ID
      required:
        - access_token
        - refresh_token
    SignUp:
      type: object
      properties:
        username:
          type: string
          title: Username
          pattern: ^[\w.@+-]+$
          maxLength: 50
          minLength: 10
        first_name:
          type: string
          title: First name
          maxLength: 150
        last_name:
          type: string
          title: Last name
          maxLength: 150
        email:
          type: integer
          format: email
          title: Email address
          maxLength: 254
          minLength: 10
        password1:
          type: string
          title: Password1
          minLength: 10
        password2:
          type: string
          title: Password2
          minLength: 10
      required:
        - username
        - email
        - password1
        - password2
    RefreshJWTToken:
      type: object
      properties:
        access_token:
          type: string
          readOnly: true
          title: Access token
          minLength: 20
        refresh_token:
          type: string
          title: Refresh token
          minLength: 20
          maxLength: 250
        created:
          type: string
          format: date-time
          title: Created in
          readOnly: true
        user:
          type: integer
          title: User ID
          readOnly: true
      required:
        - refresh_token
    BaseGenre:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          title: ID
        url:
          type: string
          format: uri
          title: URL
          readOnly: true
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
      required:
        - name
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          title: ID
        url:
          type: string
          format: uri
          title: URL
          readOnly: true
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
        year_of_publication:
          type: integer
          format: int64
          title: Year of publication
          maxLength: 3000
          minLength: 1700
        author_id:
          type: integer
          format: int64
          title: Author ID
        genres:
          type: array
          items:
            $ref: '#/components/schemas/BaseGenre'
      required:
        - name
        - year_of_publication
        - author_id
    CreateUpdateBook:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          title: ID
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
        year_of_publication:
          type: integer
          format: int64
          title: Year of publication
          maxLength: 3000
          minLength: 1700
      required:
        - name
        - year_of_publication
    AddGenreToBook:
      type: object
      properties:
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
      required:
        - name
    GenreList:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          title: ID
        url:
          type: string
          format: uri
          title: URL
          readOnly: true
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
      required:
        - name
    BaseBook:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          title: ID
        url:
          type: string
          format: uri
          title: URL
          readOnly: true
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
        year_of_publication:
          type: integer
          format: int64
          title: Year of publication
          maxLength: 3000
          minLength: 1700
        author_id:
          type: integer
          format: int64
          title: Author ID
      required:
        - name
        - year_of_publication
        - author_id
    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          title: ID
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
        book_set:
          type: array
          items:
            $ref: '#/components/schemas/BaseBook'
      required:
        - name
    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600
  securitySchemes:
    Bearer:
      type: apiKey
      description: "API key to authorize requests. Authorization by JWT token. Example: 'Bearer {JWT token}'."
      name: api_key
      in: header