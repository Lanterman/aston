openapi: 3.0.0
info:
  version: 1.0.0
  title: Library project
  description: >-
    For authenticated requests, create a user and enter the resulting token
    along with the word 'Bearer'.


    Example 'Bearer {JWT_token}'.


    P.S.
    Before resetting "auth/reset_password/<user_email>/<user_secret_key>/" password, you must request it from "/auth/profile/try_to_reset_password/" endpoint.
  contact:
    email: klivchisnkydmitry@gmail.com
  license:
    name: BSD License
servers:
  - url: http://localhost:8000/api/v1
tags:
  - name: profile
    description: User profile
  - name: auth
    description: User authorization operations
  - name: books
    description: Get a book list and create a new book
  - name: book
    description: CRUD methods for book
  - name: genres
    description: Get a genre list and create a new genre
  - name: genre
    description: CRUD methods for genre
paths:
  /auth/profile/try_to_reset_password/:
    post:
      tags:
        - profile
      summary: Try to reset password
      description: Try to reset password - endpoint
      parameters:
        - name: data
          in: body
          description: Email
          required: true
          schema:
            $ref: '#/components/schemas/TryToResetPassword'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TryToResetPassword'
        '400':
          description: Invalid data
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
  /auth/profile/{username}/:
    get:
      tags:
        - profile
      summary: User profile
      description: User profile endpoint
      parameters:
        - name: username
          in: path
          description: Required. 50 characters or fewer. Letters, digits and @/./+/-/_ only.
          required: true
          schema:
            type: integer
            pattern: ^[\w.@+-]+$
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnemyProfile'
        '400':
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    put:
      tags:
        - profile
      summary: Update user profile
      description: Update user profile endpoint
      parameters:
        - name: data
          in: body
          description: Info for update
          required: true
          schema:
            $ref: '#/components/schemas/UpdateUserInfo'
        - name: username
          in: path
          description: Required. 50 characters or fewer. Letters, digits and @/./+/-/_ only.
          required: true
          schema:
            type: integer
            pattern: ^[\w.@+-]+$
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/UpdateUserInfo'          
        '404':
          description: User not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    patch:
      tags:
        - profile
      summary: Update user profile
      description: Update user profile endpoint
      parameters:
        - name: data
          in: body
          description: Info for update
          required: true
          schema:
            $ref: '#/components/schemas/UpdateUserInfo'
        - name: username
          in: path
          description: Required. 50 characters or fewer. Letters, digits and @/./+/-/_ only.
          required: true
          schema:
            type: integer
            pattern: ^[\w.@+-]+$
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/UpdateUserInfo'          
        '404':
          description: User not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    delete:
      tags:
        - profile
      summary: Delete user
      description: Delete user endpoint
      parameters:
        - name: username
          in: path
          description: Required. 50 characters or fewer. Letters, digits and @/./+/-/_ only.
          required: true
          schema:
            type: integer
            pattern: ^[\w.@+-]+$
      responses:
        '204':
          description: User was deleted
          content:
            application/json:
                schema:
                  properties:
                    detail:
                      type: string
                      example: User was deleted.         
        '404':
          description: User not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
  /auth/profile/{username}/change_password/:
    put:
      tags:
        - profile
      summary: Change a user account password
      description: Change a user account password endpoint
      parameters:
        - name: data
          in: body
          description: Info for change password
          required: true
          schema:
            $ref: '#/components/schemas/ChangePassword'
        - name: username
          in: path
          description: Required. 50 characters or fewer. Letters, digits and @/./+/-/_ only.
          required: true
          schema:
            type: integer
            pattern: ^[\w.@+-]+$
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ChangePassword'          
        '404':
          description: User not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
  /auth/profile/{username}/reset_password/:
    put:
      tags:
        - profile
      summary: Reset a user account password
      description: Reset a user account password endpoint
      parameters:
        - name: data
          in: body
          description: Info for change password
          required: true
          schema:
            $ref: '#/components/schemas/ResetPassword'
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
        - name: secret_key
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ResetPassword'          
        '404':
          description: User not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
  /auth/sign-in/:
    post:
      tags:
        - auth
      summary: Sign in
      description: Sign in endpoint
      parameters:
        - name: data
          in: body
          description: Info to create
          required: true
          schema:
            $ref: '#/components/schemas/SignIn'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseJWTToken'
        '400':
          description: Invalid data
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
  /auth/sign-out/:
    delete:
      tags:
        - auth
      summary: Sign out
      description: Sign out (delete authentication jwt token) endpoint
      responses:
        '204':
          description: Logged out
          content:
            application/json:
                schema:
                  properties:
                    detail:
                      type: string
                      example: Successfully logged out.
        '400':
          description: Invalid data
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
  /auth/sign-up/:
    post:
      tags:
        - auth
      summary: Sign up
      description: Sign up endpoint
      parameters:
        - name: data
          in: body
          description: Info to create
          required: true
          schema:
            $ref: '#/components/schemas/SignUp'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseJWTToken'
        '400':
          description: Invalid data
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
  /auth/token/refresh/:
    post:
      tags:
        - auth
      summary: Refresh JWT token
      description: Refresh authentication JWT tokens endpoint
      parameters:
        - name: data
          in: body
          description: Info to create
          required: true
          schema:
            $ref: '#/components/schemas/RefreshJWTToken'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseJWTToken'
        '401':
          description: Refresh token expired
          content:
            application/json:
                schema:
                  properties:
                    detail:
                      type: string
                      example: Refresh token expired.
        '403':
          description: Invalid refresh token
          content:
            application/json:
                schema:
                  properties:
                    detail:
                      type: string
                      example: Invalid refresh token.
  /books/:
    get:
      tags:
        - books
      summary: Get a book list
      description: Get a list of all permitted books in the library
      parameters:
        - name: page
          in: query
          description: A page number within the paginated result set.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    format: uri
                    nullable: true
                  previous:
                    type: string
                    format: uri
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        '400':
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    post:
      tags:
        - books
      summary: Add a new book
      description: Add a new book to the library
      parameters:
        - name: data
          in: body
          description: Info to create
          required: true
          schema:
            $ref: '#/components/schemas/CreateUpdateBook'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUpdateBook'
        '400':
          description: Invalid data
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
  /books/{id}/:
    get:
      tags:
        - book
      summary: Find book by ID
      description: Returns a single book
      parameters:
        - name: id
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    put:
      tags:
        - book
      summary: Updates a book in the library with form data
      description: Updates a book in the library with form data
      parameters:
        - name: data
          in: body
          description: New info
          required: true
          schema:
            $ref: '#/components/schemas/CreateUpdateBook'
        - name: id
          in: path
          description: ID of book that needs to be updated
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The book was updated
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/CreateUpdateBook'         
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    patch:
      tags:
        - book
      summary: Updates a book in the library with form data
      description: Updates a book in the library with form data
      deprecated: true
      parameters:
        - name: data
          in: body
          description: Name of genre 
          required: true
          schema:
            $ref: '#/components/schemas/CreateUpdateBook'
        - name: id
          in: path
          description: ID of book that needs to be updated
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The book was updated
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/CreateUpdateBook'         
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    delete:
      tags:
        - book
      summary: Delete a book
      description: Delete a book endpoint
      parameters:
        - name: id
          in: path
          description: Book id to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: The book was deleted 
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
  /books/{id}/add_genre/:
    put:
      tags:
        - book
      summary: Add genre to Book
      description: Add genre to book endpoint
      parameters:
        - name: data
          in: body
          description: Name of genre 
          required: true
          schema:
            $ref: '#/components/schemas/AddGenreToBook'
        - name: id
          in: path
          description: A unique integer value identifying this Book.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The book was updated
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/AddGenreToBook'          
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    patch:
      tags:
        - book
      summary: Add genre to Book
      description: Add genre to book endpoint
      deprecated: true
      parameters:
        - name: data
          in: body
          description: Name of genre 
          required: true
          schema:
            $ref: '#/components/schemas/AddGenreToBook'
        - name: id
          in: path
          description: A unique integer value identifying this Book.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The book was updated
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/AddGenreToBook'          
        '404':
          description: Book not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
  /genres/:
    get:
      tags:
        - genres
      summary: Get a genre list
      description: Get a list of all permitted genres in the library
      parameters:
        - name: page
          in: query
          description: A page number within the paginated result set.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    format: uri
                    nullable: true
                  previous:
                    type: string
                    format: uri
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/GenreList'
        '400':
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
    post:
      tags:
        - genres
      summary: Add a new genre
      description: Add a new genre to the library
      parameters:
        - name: name
          in: body
          description: Name of genre with books of this genre to return
          required: true
          schema:
            $ref: '#/components/schemas/AddGenreToBook'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreList'
        '400':
          description: Invalid data
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'
  /genres/{name}/:
    get:
      tags:
        - genre
      summary: Find genre by name
      description: Returns a single genre with books of this genre
      parameters:
        - name: name
          in: path
          description: Name of genre with books of this genre to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '404':
          description: Genre not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer:
            - 'write:pets'
            - 'read:pets'

components:
  schemas:
    TryToResetPassword:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
          minLength: 10
      required:
        - email
    EnemyProfile:
      type: object
      properties:
        username:
          type: string
          title: Username
          pattern: ^[\w.@+-]+$
          maxLength: 50
          minLength: 10
        first_name:
          type: string
          title: First name
          maxLength: 150
        last_name:
          type: string
          title: Last name
          maxLength: 150
        email:
          type: integer
          format: email
          title: Email address
          maxLength: 254
          minLength: 10
        created_in:
          type: string
          format: date-time
          title: Created in
          readOnly: true
    UpdateUserInfo:
      type: object
      properties:
        first_name:
          type: string
          title: First name
          maxLength: 150
        last_name:
          type: string
          title: Last name
          maxLength: 150
        email:
          type: integer
          format: email
          title: Email address
          maxLength: 254
          minLength: 10
      required:
        - last_name
        - first_name
        - email
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
          title: Old password
          minLength: 10
        new_password:
          type: string
          title: New password
          minLength: 10
        confirm_password:
          type: string
          title: Confirm password
          minLength: 10
      required:
        - old_password
        - new_password
        - confirm_password
    ResetPassword:
      type: object
      properties:
        new_password:
          type: string
          title: New password
          minLength: 10
        confirm_password:
          type: string
          title: Confirm password
          minLength: 10
      required:
        - new_password
        - confirm_password
    SignIn:
      type: object
      properties:
        email:
          type: integer
          format: email
          title: Email
          maxLength: 254
          minLength: 10
        password:
          type: string
          title: Password
          minLength: 10
      required:
        - email
        - password
    BaseJWTToken:
      type: object
      properties:
        access_token:
          type: string
          title: Access token
          minLength: 20
        refresh_token:
          type: string
          title: Refresh token
          minLength: 20
          maxLength: 250
        created:
          type: string
          format: date-time
          title: Created in
          readOnly: true
        user:
          type: integer
          title: User ID
      required:
        - access_token
        - refresh_token
    SignUp:
      type: object
      properties:
        username:
          type: string
          title: Username
          pattern: ^[\w.@+-]+$
          maxLength: 50
          minLength: 10
        first_name:
          type: string
          title: First name
          maxLength: 150
        last_name:
          type: string
          title: Last name
          maxLength: 150
        email:
          type: integer
          format: email
          title: Email address
          maxLength: 254
          minLength: 10
        password1:
          type: string
          title: Password1
          minLength: 10
        password2:
          type: string
          title: Password2
          minLength: 10
      required:
        - username
        - email
        - password1
        - password2
    RefreshJWTToken:
      type: object
      properties:
        access_token:
          type: string
          readOnly: true
          title: Access token
          minLength: 20
        refresh_token:
          type: string
          title: Refresh token
          minLength: 20
          maxLength: 250
        created:
          type: string
          format: date-time
          title: Created in
          readOnly: true
        user:
          type: integer
          title: User ID
          readOnly: true
      required:
        - refresh_token
    BaseGenre:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          title: ID
        url:
          type: string
          format: uri
          title: URL
          readOnly: true
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
      required:
        - name
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          title: ID
        url:
          type: string
          format: uri
          title: URL
          readOnly: true
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
        year_of_publication:
          type: integer
          format: int64
          title: Year of publication
          maxLength: 3000
          minLength: 1700
        author_id:
          type: integer
          format: int64
          title: Author ID
        genres:
          type: array
          items:
            $ref: '#/components/schemas/BaseGenre'
      required:
        - name
        - year_of_publication
        - author_id
    CreateUpdateBook:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          title: ID
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
        year_of_publication:
          type: integer
          format: int64
          title: Year of publication
          maxLength: 3000
          minLength: 1700
      required:
        - name
        - year_of_publication
    AddGenreToBook:
      type: object
      properties:
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
      required:
        - name
    GenreList:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          title: ID
        url:
          type: string
          format: uri
          title: URL
          readOnly: true
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
      required:
        - name
    BaseBook:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          title: ID
        url:
          type: string
          format: uri
          title: URL
          readOnly: true
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
        year_of_publication:
          type: integer
          format: int64
          title: Year of publication
          maxLength: 3000
          minLength: 1700
        author_id:
          type: integer
          format: int64
          title: Author ID
      required:
        - name
        - year_of_publication
        - author_id
    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          title: ID
        name:
          type: string
          title: Name
          maxLength: 100
          minLength: 5
        book_set:
          type: array
          items:
            $ref: '#/components/schemas/BaseBook'
      required:
        - name
    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600
  securitySchemes:
    Bearer:
      type: apiKey
      description: "API key to authorize requests. Authorization by JWT token. Example: 'Bearer {JWT token}'."
      name: Authorization
      in: header